/**
 * @file dcl_parser_impl.h
 * @author Derek Huang
 * @brief C++ parser implementation for simplified C declarations
 * @copyright MIT License
 */

#ifndef BDCL_DCL_PARSER_IMPL_H_
#define BDCL_DCL_PARSER_IMPL_H_

#include <string>

#include "pdcpl/warnings.h"

/**
 * Forward declaration to satisfy the `yy::dcl_parser` class definition.
 *
 * The `yy::dcl_parser` takes a `bdcl::dcl_parser_impl&` as a parameter.
 */
namespace bdcl { class dcl_parser_impl; }  // namespace bdcl

/**
 * The C++ header generated by Bison defining the parsing class.
 *
 * We need this in order to use `YY_DECL`, and so this must be included first.
 *
 * MSVC always emits C4065 (switch with default but no case labels) when this
 * header is included in a translation unit, so we disable when including.
 */
PDCPL_MSVC_WARNING_DISABLE(4065)
#include "bdcl/parser.yy.h"
PDCPL_MSVC_WARNING_ENABLE()

/**
 * `YY_DECL` function declaration return type.
 *
 * This is defined separately so the `yylex` friend declaration can use it.
 */
#define BDCL_YYLEX_RETURN yy::dcl_parser::symbol_type

/**
 * `YY_DECL` function name.
 *
 * Usually this can be left as `yylex` unless the Flex name prefix is changed.
 */
#define BDCL_YYLEX yylex

/**
 * `YY_DECL` function declaration arguments.
 *
 * Should be a comma-separated list of function arguments.
 */
#define BDCL_YYLEX_ARGS bdcl::dcl_parser_impl& parser

/**
 * Macro declaring `yylex` in the format the Bison parser expects.
 *
 * The corresponding parser handles complete symbols and uses variant values.
 */
#define YY_DECL BDCL_YYLEX_RETURN BDCL_YYLEX(BDCL_YYLEX_ARGS)

/**
 * `yylex` declaration compatible with C++ Bison parser.
 *
 * There is no need to make this `extern "C"` since the generated Flex lexer
 * is being compiled as C++, not as straight C code.
 */
YY_DECL;

namespace bdcl {

/**
 * Parser driver implementation class for parsing C declarations.
 */
class dcl_parser_impl {
public:
  /**
   * Parse the specified input file.
   *
   * @param input_file File to read input from, empty or "-" for `stdin`
   * @param trace_lexer `true` to enable lexer tracing
   * @param trace_parser `true` to enable parser tracing
   * @returns `true` on success, `false` on failure
   */
  bool parse(const std::string& input_file, bool trace_lexer, bool trace_parser);

  // allow lexer to access to the parse driver members to update location +
  // error. we use (::BDCL_YYLEX) to tell compiler BDCL_YYLEX is in the global
  // namespace, not in the current enclosing bdcl namespace
  friend BDCL_YYLEX_RETURN (::BDCL_YYLEX)(BDCL_YYLEX_ARGS);
  // allow parser to access parse driver members to update location + error
  friend class yy::dcl_parser;

  /**
   * Return last location of the parser.
   */
  const auto& location() const noexcept { return location_; }

  /**
   * Return last error encountered during parsing.
   */
  const auto& last_error() const noexcept { return last_error_; }

private:
  yy::location location_;
  std::string last_error_;

  /**
   * Perform setup for the Flex lexer.
   *
   * @param input_file Input file to read. If empty or "-", `stdin` is used.
   * @param enable_debug `true` to turn on lexer tracing, default `false`
   * @returns `true` on success, `false` on failure and sets `last_error_`
   */
  bool lex_setup(const std::string& input_file, bool enable_tracing) noexcept;

  /**
   * Perform cleanup for the Flex lexer.
   *
   * Currently, all this does is close `yyin` unless `yyin` is `stdin`.
   *
   * @param input_file Input file passed to `lex_setup`. Used in error reporting.
   * @returns `true` on success, `false` on failure and sets `last_error_`
   */
  bool lex_cleanup(const std::string& input_file) noexcept;
};

}  // namespace bdcl

#endif  // BDCL_DCL_PARSER_IMPL_H_
